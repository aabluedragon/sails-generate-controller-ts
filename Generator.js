/**
 * Module dependencies
 */

var _ = require('lodash');
var fs = require('fs');
var path = require('path');
_.defaults = require('merge-defaults');
var pluralize = require('pluralize');
var colors = require('colors');


/**
 * sails-generate-controller-ts
 *
 * Usage:
 * `sails generate controller-ts`
 *
 * @description Generates a controller-ts
 * @help See http://links.sailsjs.org/docs/generators
 */

module.exports = {

  /**
   * `before()` is run before executing any of the `targets`
   * defined below.
   *
   * This is where we can validate user input, configure default
   * scope variables, get extra dependencies, and so on.
   *
   * @param  {Object} scope
   * @param  {Function} cb    [callback]
   */

  before: function (scope, cb) {

    // scope.args are the raw command line arguments.
    //
    // e.g. if someone runs:
    // $ sails generate controller-ts user find create update
    // then `scope.args` would be `['user', 'find', 'create', 'update']`
    if (!scope.args[0]) {
      return cb( 'Usage: sails generate controller-ts <controllername>' );
    }

    if (!scope.rootPath) {
      return cb( INVALID_SCOPE_VARIABLE('rootPath') );
    }

    // Ensure that the command is ran from root.
    if (!isValidRoot(scope.rootPath)) {
      return cb( INVALID_ROOT_PATH() );
    }

    // Ensure that the name is valid
    if (!isValidName(scope.args[0])) {
      return cb( INVALID_NAME() );
    }

    checkMissingDefinitions(scope.rootPath);
    
    // Attach defaults
    _.defaults(scope, {
      createdAt: new Date()
    });

    // Limit controller name correctly.
    var capitalizedName = capitalize(scope.args[0]);
    scope.controllerName = capitalizedName + 'Controller';
    // Pluralize item.
    scope.modelName = pluralize(capitalizedName);

    if (doesControllerExist(scope.rootPath, scope.controllerName)) {
      return cb( ALREADY_EXISTS(scope.controllerName) );
    }

    // Decide the output filename for use in targets below:
    scope.filename = '/api/controllers/' + scope.controllerName + '.ts';

    cb();
  },



  /**
   * The files/folders to generate.
   * @type {Object}
   */

  targets: {

    // Usage:
    // './path/to/destination.foo': { someHelper: opts }

    // Creates a dynamically-named file relative to `scope.rootPath`
    // (defined by the `filename` scope variable).
    //
    // The `template` helper reads the specified template, making the
    // entire scope available to it (uses underscore/JST/ejs syntax).
    // Then the file is copied into the specified destination (on the left).
    './:filename': { template: 'controller-template.js' }

  },


  /**
   * The absolute path to the `templates` for this generator
   * (for use with the `template` helper)
   *
   * @type {String}
   */
  templatesDirectory: require('path').resolve(__dirname, './templates')
};

function INVALID_ROOT_PATH() {
  var message = 'Sorry, this command can only be used in the root directory of a Sails project.';
  return message;
}

function INVALID_NAME() {
  var message = 'Sorry, you can only generate controller names that are alphabetic.';
  return message;
}

function ALREADY_EXISTS(controllerName) {
  var message = 'A controller of the name ' + controllerName + ' already exists at /api/controllers.';
  return message;
}

function isValidRoot(rootPath) {
  var rootFiles = fs.readdirSync(rootPath);
  var rootExists = [ 'package.json', 'app.js', '.sailsrc', 'config', 'api' ];
  return rootExists.every(function (mustExist) {
    return rootFiles.indexOf(mustExist) !== -1;
  });
}

function checkMissingDefinitions(rootPath) {
  var rootFiles = fs.readdirSync(rootPath);
  var typingsExists = rootFiles.indexOf('typings') !== -1;

  if (!typingsExists) {
    warn('You may be missing type definitions that can be managed by tsd.');
    console.log();
    info('You can install the TypeScript Definition manager with the command: ');
    console.log('          npm install tsd -g');
    console.log();
    return;
  }
  var typingFiles = fs.readdirSync(path.join(rootPath, 'typings'));
  if (typingFiles.indexOf('express') === -1) {
    warn('You may be missing type definitions for express, which sails controllers use.');
    console.log();
  }

  if (typingFiles.indexOf('tsd.d.ts') === -1) {
    warn('You may be missing the consolidated type definition file generated by the TypeScript Definition manager.');
    console.log();
    warn('If you are managing type definitions using tsd, please make sure that the file tsd.d.ts exists under the typings folder.');
    console.log();
  }
}

function warn(message) {
  process.stdout.write('warn: '.yellow);
  console.log(message);
}
function info(message) {
  process.stdout.write('info: '.blue);
  console.log(message);
}

var alphabetOnly = new RegExp('[^A-Za-z]');
function isValidName(name) {
  return !alphabetOnly.exec(name);
}

function doesControllerExist(rootPath, controllerName) {
  var rootFiles = fs.readdirSync(rootPath);
  if (rootFiles.indexOf('api') !== -1) {
    var apiFiles = fs.readdirSync(path.join(rootPath, 'api'));
    if (apiFiles.indexOf('controllers') !== -1) {
      var controllerFiles = fs.readdirSync(path.join(rootPath, 'api', 'controllers'));
      return (controllerFiles.indexOf(controllerName + '.js') !== -1 || 
        controllerFiles.indexOf(controllerName + '.ts') !== -1);
    }
  }

  return false;
}

function capitalize(name) {
  return name[0].toUpperCase() + name.substring(1).toLowerCase();
}